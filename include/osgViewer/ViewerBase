/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGVIEWER_VIEWERBASE
#define OSGVIEWER_VIEWERBASE 1

#include <osg/Stats>

#include <osgUtil/UpdateVisitor>
#include <osgUtil/IncrementalCompileOperation>

#include <osgGA/EventVisitor>
#include <osgGA/EventQueue>

#include <osgViewer/Scene>
#include <osgViewer/GraphicsWindow>

namespace osgViewer {

#define USE_REFERENCE_TIME DBL_MAX

class View;

/** 视景器的基类，Viewer 和 CompositeViewer继承这个类.
视景器的工作就是高效的将一个或多个相机组织在一起，并结合场景节点的更新和遍历，
将相机在每一帧所拍摄的内容连续的播放出来，从而实现一个完整的三维仿真系统的主要工作
视景器的主要工作包括：
1、管理场景所对应的一个或多个节点树（getScenes()函数），这个是整个三维世界的主要数据组织者和保存者
2、管理场景中所有的相机，进而管理所有的图形设备，例如渲染窗体和像素缓存
3、执行场景的仿真循环，即按照一定的循环速率，持续执行场景的渲染并将其反映到图形设备上，每
当场景被渲染一次，即称做一帧，在每帧中，视景器需要依次执行场景的更新 （包括交互事件响应、
内存空间的管理，以及用户自定义的更新事件）、裁减（将无益于绘制结果的对象从帧的渲染中剔除，
例如视锥体以外的对象）和绘制（使用OpenGL管线进行渲染并输出结果）等，周而复始，形成完整的
三维交互环境
4、为了提升渲染效率，视景器还需要负责管理多个参与更新、裁减和绘制过程的线程，检查他们的
同步性和数据的互锁，保证多线程的仿真工作能顺利地进行
5、记录场景的统计信息，例如帧速率，系统运行时间（由osg::FrameStamp类负责），以及当前渲染
的节点数，三角形数，顶点数(由osg::Stats类负责)*/
class OSGVIEWER_EXPORT ViewerBase : public virtual osg::Object
{
    public:

        ViewerBase();
        ViewerBase(const ViewerBase& vb);


        /** Set the Stats object used to collect various frame related timing and scene graph stats.*/
        virtual void setViewerStats(osg::Stats* stats) = 0;

        /** 获取场景统计工具*/
        virtual osg::Stats* getViewerStats() = 0;

        /** 获取场景统计工具const*/
        virtual const osg::Stats* getViewerStats() const = 0;


         /** read the viewer configuration from a configuration file.*/
        virtual bool readConfiguration(const std::string& filename) = 0;

        /** 判断是否初始化，以及执行视景器初始化的函数*/
        virtual bool isRealized() const = 0;

        /** 设置窗体及相关线程*/
        virtual void realize() = 0;

        enum ThreadingModel
        {
            SingleThreaded,
            CullDrawThreadPerContext,
            ThreadPerContext = CullDrawThreadPerContext,
            DrawThreadPerContext,
            CullThreadPerCameraDrawThreadPerContext,
            ThreadPerCamera = CullThreadPerCameraDrawThreadPerContext,
            AutomaticSelection
        };

        /** 设置遍历渲染的线程模型*/
        virtual void setThreadingModel(ThreadingModel threadingModel);

        /** 得到遍历渲染的线程模型*/
        ThreadingModel getThreadingModel() const { return _threadingModel; }

        /** Let the viewer suggest the best threading model for the viewers camera/window setup and the hardware available.*/
        virtual ThreadingModel suggestBestThreadingModel();

        /** Set up the threading and processor affinity as per the viewers threading model.*/
        virtual void setUpThreading();

        /** Return true if viewer threads are running. */
        bool areThreadsRunning() const { return _threadsRunning; }

        /** Stop any threads being run by viewer.*/
        virtual void stopThreading();

        /** Start any threads required by the viewer.*/
        virtual void startThreading();

        enum BarrierPosition
        {
            BeforeSwapBuffers,
            AfterSwapBuffers
        };

         /** Set the position of the end barrier.
          * AfterSwapBuffers may result in slightly higher framerates, but may
          * lead to inconsistent swapping between different windows.
          * BeforeSwapBuffers may lead to slightly lower framerate, but improve consistency in timing of swap buffers,
          * especially important if you are likely to consistently break frame.*/
        void setEndBarrierPosition(BarrierPosition bp);

        /** Get the end barrier position.*/
        BarrierPosition getEndBarrierPosition() const { return _endBarrierPosition; }

        /** Set the end barrier operation. \c op may be one of GL_FLUSH, GL_FINISH,
         * or NO_OPERATION. NO_OPERATION is the default. Per BarrierOperation::operator()(),
         * a glFlush() command, glFinish() command, or no additional OpenGL command will be
         * issued before entering the end barrier. */
        void setEndBarrierOperation(osg::BarrierOperation::PreBlockOp op);

        /** Get the end barrier operation. */
        osg::BarrierOperation::PreBlockOp getEndBarrierOperation() const { return _endBarrierOperation; }


        /** Set the done flag to signal the viewer's work is done and should exit the frame loop.*/
        void setDone(bool done) { _done = done; }

        /** 如果仿真工作已经完成，退出帧的循环，则返回true*/
        bool done() const { return _done; }

        /** 设置交互事件访问器 EventVisitor. */
        void setEventVisitor(osgGA::EventVisitor* eventVisitor) { _eventVisitor = eventVisitor; }

        /** 得到交互事件访问器 EventVisitor. */
        osgGA::EventVisitor* getEventVisitor() { return _eventVisitor.get(); }

        /** 得到交互事件访问器 const EventVisitor. */
        const osgGA::EventVisitor* getEventVisitor() const { return _eventVisitor.get(); }

        /** Set the key event that the viewer checks on each frame to see if the viewer's done flag should be set to
          * signal end of viewers main loop.
          * Default value is Escape (osgGA::GUIEVentAdapter::KEY_Escape).
          * Setting to 0 switches off the feature.*/
        void setKeyEventSetsDone(int key) { _keyEventSetsDone = key; }

        /** get the key event that the viewer checks on each frame to see if the viewer's done flag.*/
        int getKeyEventSetsDone() const { return _keyEventSetsDone; }

        /** if the flag is true, the viewer set its done flag when a QUIT_APPLICATION is received, false disables this feature */
        void setQuitEventSetsDone(bool flag) { _quitEventSetsDone = flag; }

        /** @return true if the viewer respond to the QUIT_APPLICATION-event */
        bool getQuitEventSetsDone() const { return _quitEventSetsDone; }


        /** Hint to tell the renderingTraversals() method whether to call releaseContext() on the last
          * context that was made current by the thread calling renderingTraverals().  Note, when
          * running multi-threaded viewer no threads will be made current or release current.
          * Setting this hint to false can enable the frame loop to be lazy about calling makeCurrent
          * and releaseContext on each new frame, helping performance.  However, if you frame loop
          * is managing multiple graphics context all from the main frame thread then this hint must
          * be left on, otherwise the wrong context could be left active, introducing errors in rendering.*/
        void setReleaseContextAtEndOfFrameHint(bool hint) { _releaseContextAtEndOfFrameHint = hint; }

        /** Hint to tell the renderingTraversals() method whether to call releaseContext().*/
        bool getReleaseContextAtEndOfFrameHint() const { return _releaseContextAtEndOfFrameHint; }


        /** Set the UpdateVisitor. */
        void setUpdateVisitor(osgUtil::UpdateVisitor* updateVisitor) { _updateVisitor = updateVisitor; }

        /** Get the UpdateVisitor. */
        osgUtil::UpdateVisitor* getUpdateVisitor() { return _updateVisitor.get(); }

        /** Get the const UpdateVisitor. */
        const osgUtil::UpdateVisitor* getUpdateVisitor() const { return _updateVisitor.get(); }


        /** Set the Update OperationQueue. */
        void setUpdateOperations(osg::OperationQueue* operations) { _updateOperations = operations; }

        /** Get the Update OperationQueue. */
        osg::OperationQueue* getUpdateOperations() { return _updateOperations.get(); }

        /** Get the const Update OperationQueue. */
        const osg::OperationQueue* getUpdateOperations() const { return _updateOperations.get(); }

        /** Add an update operation.*/
        void addUpdateOperation(osg::Operation* operation);

        /** Remove an update operation.*/
        void removeUpdateOperation(osg::Operation* operation);


        /** Set the graphics operation to call on realization of the viewers graphics windows.*/
        void setRealizeOperation(osg::Operation* op) { _realizeOperation = op; }

        /** Get the graphics operation to call on realization of the viewers graphics windows.*/
        osg::Operation* getRealizeOperation() { return _realizeOperation.get(); }


        /** Set the incremental compile operation.
          * Used to manage the OpenGL object compilation and merging of subgraphs in a way that avoids overloading
          * the rendering of frame with too many new objects in one frame. */
        void setIncrementalCompileOperation(osgUtil::IncrementalCompileOperation* ico);

        /** Get the incremental compile operation. */
        osgUtil::IncrementalCompileOperation* getIncrementalCompileOperation() { return _incrementalCompileOperation.get(); }

		// 仿真循环运行的方式
        enum FrameScheme
        {
            ON_DEMAND,//采用按需渲染
            CONTINUOUS//持续渲染
        };
		/** 设置\获取仿真循环运行的方式，是采用按需渲染ON_DEMAND，还是持续渲染CONTINUOUS*/
        void setRunFrameScheme(FrameScheme fs) { _runFrameScheme = fs; }
        FrameScheme getRunFrameScheme() const { return _runFrameScheme; }

		/**设置\获取仿真循环运行的最大帧速率，系统的运行速率将被限制在这个数值以下*/
        void setRunMaxFrameRate(double frameRate) { _runMaxFrameRate = frameRate; }
        double getRunMaxFrameRate() const { return _runMaxFrameRate; }

        /** 执行仿真循环
          * 相当于执行 while (!viewer.done()) viewer.frame();
          * 另外如果viewwe没有初始化，会调用 realize()进行初始化
          * 并且如果指定相机操纵器则会安装trackball manipulator
          */
        virtual int run();

        /** check to see if the new frame is required, called by run(..) when FrameScheme is set to ON_DEMAND.*/
        virtual bool checkNeedToDoFrame() = 0;
        
        /** check to see if events have been received, return true if events are now available.*/
        virtual bool checkEvents() = 0;

        /** 完成仿真循环的一帧
          * Calls advance(), eventTraversal(), updateTraversal(), renderingTraversals(). */
        virtual void frame(double simulationTime=USE_REFERENCE_TIME);

		/** 在一帧中被调用，执行时间的推进*/
        virtual void advance(double simulationTime=USE_REFERENCE_TIME) = 0;
		/** 在一帧中被调用，交互事件的处理*/
        virtual void eventTraversal() = 0;
		/** 在一帧中被调用，场景和用户更新*/
        virtual void updateTraversal() = 0;
		/** 在一帧中被调用，场景裁减和渲染操作*/
        virtual void renderingTraversals();

		//////////////////////////用于获取视景器所管理的各种组件元素//////////////////////
		/** 场景中的相机*/
        typedef std::vector<osg::Camera*> Cameras;
        virtual void getCameras(Cameras& cameras, bool onlyActive=true) = 0;
		/** 视景器对应的窗口和像素缓存设备*/
        typedef std::vector<osg::GraphicsContext*> Contexts;
        virtual void getContexts(Contexts& contexts, bool onlyValid=true) = 0;
		/** 视景器对应的所有图形窗口*/
        typedef std::vector<osgViewer::GraphicsWindow*> Windows;
        virtual void getWindows(Windows& windows, bool onlyValid=true);
		/** 视景器开启的所有线程*/
        typedef std::vector<OpenThreads::Thread*> Threads;
        virtual void getAllThreads(Threads& threads, bool onlyActive=true) = 0;
		/** 视景器开启的所有与图形操作相关的线程*/
        typedef std::vector<osg::OperationThread*> OperationThreads;
        virtual void getOperationThreads(OperationThreads& threads, bool onlyActive=true) = 0;
		/** 场景节点树*/
        typedef std::vector<osgViewer::Scene*> Scenes;
        virtual void getScenes(Scenes& scenes, bool onlyValid=true) = 0;
		/** 视图对象*/
        typedef std::vector<osgViewer::View*> Views;
        virtual void getViews(Views& views, bool onlyValid=true) = 0;

        /** Check to see if any windows are still open. If not, set viewer done to true. */
        void checkWindowStatus();

        /** Check to see if windows are still open using the list of contexts given as a parameter.
         *  If no windows are open, stop rendering threads and set viewer done to true.
         *  This function is more effective than checkWindowStatus() as it does not query
         *  the context list and should be used whenever context list is already available in your code.*/
        void checkWindowStatus(const Contexts& contexts);

		/** 随时记录当前运行的时间*/
        virtual double elapsedTime() = 0;
		/** 获取帧数据统计工具*/
        virtual osg::FrameStamp* getViewerFrameStamp() = 0;

        /** Get the keyboard and mouse usage of this viewer.*/
        virtual void getUsage(osg::ApplicationUsage& usage) const = 0;

    protected:

        void viewerBaseInit();

        friend class osgViewer::View;

        inline void makeCurrent(osg::GraphicsContext* gc)
        {
            if (_currentContext==gc) return;

            releaseContext();

            if (gc && gc->valid() && gc->makeCurrent()) _currentContext = gc;
        }

        inline void releaseContext()
        {
            if (_currentContext.valid() && _currentContext->valid())
            {
                _currentContext->releaseContext();
            }
            _currentContext = 0;
        }

        virtual void viewerInit() = 0;

        bool                                                _firstFrame;
        bool                                                _done;
        int                                                 _keyEventSetsDone;
        bool                                                _quitEventSetsDone;
        bool                                                _releaseContextAtEndOfFrameHint;

        ThreadingModel                                      _threadingModel;
        bool                                                _threadsRunning;

        bool                                                _requestRedraw;
        bool                                                _requestContinousUpdate;

        FrameScheme                                         _runFrameScheme;
        double                                              _runMaxFrameRate;


        BarrierPosition                                     _endBarrierPosition;
        osg::BarrierOperation::PreBlockOp                   _endBarrierOperation;

        osg::ref_ptr<osg::BarrierOperation>                 _startRenderingBarrier;
        osg::ref_ptr<osg::BarrierOperation>                 _endRenderingDispatchBarrier;
        osg::ref_ptr<osg::EndOfDynamicDrawBlock>            _endDynamicDrawBlock;

        osg::ref_ptr<osgGA::EventVisitor>                   _eventVisitor;

        osg::ref_ptr<osg::OperationQueue>                   _updateOperations;
        osg::ref_ptr<osgUtil::UpdateVisitor>                _updateVisitor;

        osg::ref_ptr<osg::Operation>                        _realizeOperation;
        osg::ref_ptr<osgUtil::IncrementalCompileOperation>  _incrementalCompileOperation;

        osg::observer_ptr<osg::GraphicsContext>             _currentContext;
        
    private:
        
        // Define private copy constructor
        // otherwsie VS2015 will construct it's own which will call the private copy operator from osg::Object resulting in an compile error.
        ViewerBase& operator = (const ViewerBase&) { return *this; }
};

}

#endif
