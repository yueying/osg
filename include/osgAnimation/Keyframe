/*  -*-c++-*-
 *  Copyright (C) 2008 Cedric Pinson <mornifle@plopbyte.net>
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGANIMATION_KEYFRAME_H
#define OSGANIMATION_KEYFRAME_H

#include <string>
#include <osg/Referenced>
#include <osgAnimation/Vec3Packed>
#include <osgAnimation/CubicBezier>
#include <osg/Quat>
#include <osg/Vec4>
#include <osg/Vec3>
#include <osg/Vec2>
#include <osg/Matrixf>

namespace osgAnimation
{
	/**关键帧的基类*/
    class Keyframe
    {
    public:
		/**得到关键帧的时刻*/
        double getTime() const { return _time; }
		/**设置关键帧的时刻*/
        void setTime(double time) { _time = time; }

    protected:
        double _time;

    };
	/**定义一个关键帧模板，以便记录各种可能随时间变化的数据
	例如一个数值、一个空间点、一个四元数等*/
    template <class T>
    class TemplateKeyframe : public Keyframe
    {
    protected:
        T _value;
    public:
        TemplateKeyframe () {}
        ~TemplateKeyframe () {}

        TemplateKeyframe (double time, const T& value)
        {
            _time = time;
            _value = value;
        }

        void setValue(const T& value) { _value = value;}
        const T& getValue() const { return _value;}
    };

	/**关键帧容器类，用于负责记录所有用户设置的关键帧容器*/
    class KeyframeContainer : public osg::Referenced
    {
    public:
		/**默认构造函数*/
        KeyframeContainer() {}
		/**容器中保存的数据量*/
        virtual unsigned int size() const = 0;
    protected:
        ~KeyframeContainer() {}
        std::string _name;
    };

	/**使用模板类定义一个使用向量组记录关键帧模板的“关键帧容器模板”
	它可以保存下面定义的各种类型的关键帧数据，由于继承vector，这样具备了
	std::vector的全部共有成员函数和属性。*/
    template <class T>
    class TemplateKeyframeContainer : public std::vector<TemplateKeyframe<T> >, public KeyframeContainer
    {
    public:
        //    const char* getKeyframeType() { return #T ;}
        TemplateKeyframeContainer() {}
        typedef TemplateKeyframe<T> KeyType;

        virtual unsigned int size() const { return (unsigned int)std::vector<TemplateKeyframe<T> >::size(); }

    };

    template <>
    class TemplateKeyframeContainer<Vec3Packed> : public std::vector<TemplateKeyframe<Vec3Packed> >, public KeyframeContainer
    {
    public:
        typedef TemplateKeyframe<Vec3Packed> KeyType;

        TemplateKeyframeContainer() {}
        const char* getKeyframeType() { return "Vec3Packed" ;}
        void init(const osg::Vec3f& min, const osg::Vec3f& scale) { _min = min; _scale = scale; }

        osg::Vec3f _min;
        osg::Vec3f _scale;
    };

	/**float*/
    typedef TemplateKeyframe<float> FloatKeyframe;
    typedef TemplateKeyframeContainer<float> FloatKeyframeContainer;
	/**double*/
    typedef TemplateKeyframe<double> DoubleKeyframe;
    typedef TemplateKeyframeContainer<double> DoubleKeyframeContainer;

    typedef TemplateKeyframe<osg::Vec2> Vec2Keyframe;
    typedef TemplateKeyframeContainer<osg::Vec2> Vec2KeyframeContainer;

    typedef TemplateKeyframe<osg::Vec3> Vec3Keyframe;
    typedef TemplateKeyframeContainer<osg::Vec3> Vec3KeyframeContainer;

    typedef TemplateKeyframe<osg::Vec4> Vec4Keyframe;
    typedef TemplateKeyframeContainer<osg::Vec4> Vec4KeyframeContainer;

    typedef TemplateKeyframe<osg::Quat> QuatKeyframe;
    typedef TemplateKeyframeContainer<osg::Quat> QuatKeyframeContainer;

    typedef TemplateKeyframe<osg::Matrixf> MatrixKeyframe;
    typedef TemplateKeyframeContainer<osg::Matrixf> MatrixKeyframeContainer;

    typedef TemplateKeyframe<Vec3Packed> Vec3PackedKeyframe;
    typedef TemplateKeyframeContainer<Vec3Packed> Vec3PackedKeyframeContainer;

	/**CubicBezier属于三次贝赛尔数据类型，其构造函数需要输入3个同类型的控制值
	第一个为位置点，后两个为切线点，进行关键帧之间的插值运算时，将使用三次贝赛尔曲线插值
	的方式进行计算*/
    typedef TemplateKeyframe<FloatCubicBezier> FloatCubicBezierKeyframe;
    typedef TemplateKeyframeContainer<FloatCubicBezier> FloatCubicBezierKeyframeContainer;

    typedef TemplateKeyframe<DoubleCubicBezier> DoubleCubicBezierKeyframe;
    typedef TemplateKeyframeContainer<DoubleCubicBezier> DoubleCubicBezierKeyframeContainer;

    typedef TemplateKeyframe<Vec2CubicBezier> Vec2CubicBezierKeyframe;
    typedef TemplateKeyframeContainer<Vec2CubicBezier> Vec2CubicBezierKeyframeContainer;

    typedef TemplateKeyframe<Vec3CubicBezier> Vec3CubicBezierKeyframe;
    typedef TemplateKeyframeContainer<Vec3CubicBezier> Vec3CubicBezierKeyframeContainer;

    typedef TemplateKeyframe<Vec4CubicBezier> Vec4CubicBezierKeyframe;
    typedef TemplateKeyframeContainer<Vec4CubicBezier> Vec4CubicBezierKeyframeContainer;

}

#endif
